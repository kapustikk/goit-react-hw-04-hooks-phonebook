{"version":3,"sources":["components/PhonebookHooks/phonebook.module.css","components/PhonebookHooks/ContactForm.js","components/PhonebookHooks/ContactList.js","components/PhonebookHooks/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","contacts","onSubmit","useState","name","setName","number","setNumber","e","preventDefault","nameMatch","reduce","acc","contact","numberMatch","includes","alert","phonebookMatching","className","s","form","label","type","value","onChange","currentTarget","input","button","ContactList","onDeleteContact","contactList","map","id","allContacts","onClick","Filter","App","setContacts","filter","setFilter","firstRender","useRef","useEffect","current","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","filteredContacts","toLowerCase","contactId","shortid","generate","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dda2473.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"phonebook_form__1luIf\",\"label\":\"phonebook_label__ibrek\",\"input\":\"phonebook_input__31tJF\",\"button\":\"phonebook_button__2qKOI\",\"contactList\":\"phonebook_contactList__Cujnr\",\"allContacts\":\"phonebook_allContacts__1oK5N\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './phonebook.module.css';\n\nexport default function ContactForm({ contacts, onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const phonebookMatching = () => {\n    const nameMatch = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n\n    const numberMatch = contacts.reduce(\n      (acc, contact) => [...acc, contact.name],\n      [],\n    );\n\n    if (nameMatch.includes(name) || numberMatch.includes(number)) {\n      alert(`${name} or ${number} is already in contacts`);\n      return true;\n    }\n    if (name === '' || number === '') {\n      alert('Please enter full number or name');\n      return true;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setName('');\n    setNumber('');\n\n    if (phonebookMatching()) {\n      return;\n    }\n    onSubmit(name, number);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.currentTarget.value)}\n          className={s.input}\n        ></input>\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={e => setNumber(e.currentTarget.value)}\n          className={s.input}\n        ></input>\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import PropTypes from 'prop-types';\nimport s from './phonebook.module.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.contactList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.allContacts}>\n          <p>\n            {name}: {number}\n          </p>\n          <button onClick={() => onDeleteContact(id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport s from './phonebook.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <form className={s.form}>\n    <label className={s.label}>\n      Find contact by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  </form>\n);\nexport default Filter;\n","import { useState, useEffect, useRef } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/PhonebookHooks/ContactForm';\nimport ContactList from './components/PhonebookHooks/ContactList';\nimport Filter from './components/PhonebookHooks/Filter';\n\nconst allContacts = [];\n\nexport default function App() {\n  const [contacts, setContacts] = useState(allContacts);\n  const [filter, setFilter] = useState('');\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      const contacts = localStorage.getItem('contacts');\n      const parsedContacts = JSON.parse(contacts);\n\n      if (parsedContacts) {\n        setContacts(parsedContacts);\n      }\n      firstRender.current = false;\n      return;\n    }\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = (name, number) => {\n    const contactId = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    setContacts([contactId, ...contacts]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const changeFilter = ({ target }) => {\n    setFilter(target.value);\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addContact} contacts={contacts} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={deleteContact}\n        />\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}